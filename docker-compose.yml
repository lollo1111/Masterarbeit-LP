---
version: "3"
services:
  # test:
  #   container_name: test
  #   image: test_image
  #   build: test/
  #   ports:
  #     - "8298:8298"
  #     - "9296:9296"         # 9296 is the port for enabling the instantiation service
  #     - "8080:8080"
  #   networks:
  #     - cpee-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my-network 

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server broker:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - my-network 

  influxdb: 
    image: influxdb:latest
    ports:
      - '8086:8086'
    volumes:
      - influxvolume:/var/lib/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    networks:
      - my-network

  data-stream-consumer:
    links:
      - influxdb
    container_name: consumer
    build: data_stream/
    image: consumer_image
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - my-network

  socket-client:
    container_name: client
    build: socket_client/
    image: socket_client_image

  open-plc:
    container_name: openplc
    build: openplc/
    image: openplc_image
    ports:
      - '8080:8080'
      - '192.168.1.2:502:502'
    privileged: true
    volumes:
      - ./openplc/scripts:/workdir/OpenPLC_v3/webserver/st_files
    depends_on:
      broker:
        condition: service_healthy

  digital-twin:
    container_name: digitaltwin
    build: digital_twin/
    image: digitaltwin_image
    ports:
      - '5173:5173'

volumes:
  influxvolume:
  yolovolume:

networks:
  my-network:
    driver: bridge

# networks:
#   cpee-network: