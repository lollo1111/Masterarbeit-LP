---
version: "3.7"
services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - twin-network 

  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server broker:9092 --list
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - twin-network 

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    ports:
      - '8086:8086'
    volumes:
      - influxvolume:/var/lib/influxdb2
    depends_on:
      - mqttbridge
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    networks:
      - twin-network

  grafana:
    container_name: grafana
    image: grafana/grafana
    # image: grafana/grafana-oss
    # image: grafana/grafana-enterprise:latest
    restart: always
    links:
     - influxdb
    depends_on:
     - influxdb
    environment:
     - BUCKET=${INFLUXDB_BUCKET}
     - ORG=${INFLUXDB_ORG}
     - TKN=${INFLUXDB_TOKEN}
    ports:
      - 3000:3000
    user: '472'
    volumes:
     - ./grafana/custom.ini:/etc/grafana/grafana.ini
     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
     - grafana_data:/var/lib/grafana

  data-stream-consumer:
    container_name: consumer
    links:
      - influxdb
    build: data_stream/
    image: consumer
    depends_on:
      - mqttbridge
    networks:
      - twin-network

  open-plc:
    container_name: openplc
    build: openplc/
    image: openplc_image
    ports:
      - '8080:8080'
    stop_grace_period: 30s
    stop_signal: SIGTERM
    privileged: true
    volumes:
      - ./openplc/scripts:/workdir/OpenPLC_v3/webserver/st_files
    environment:
      - MODBUS_SERVER=${MODBUS_SERVER}
      - MODBUS_PORT=${MODBUS_PORT}
    depends_on:
      broker:
        condition: service_healthy

  digital-twin:
    container_name: digitaltwin
    build: digital_twin/
    image: digitaltwin_image
    ports:
      - '80:5173'
    depends_on:
      - grafana

  cpee:
    container_name: cpee
    image: cpee_image
    build: cpee/
    ports:
      - "8298:8298"
      - "9296:9296"         # 9296 is the port for enabling the instantiation service
      - "8081:8080"
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - cpee-network

  backend:
    container_name: backend
    build: backend/
    image: backend_image
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9033:9033"
    depends_on:
      - grafana

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:2
    user: mosquitto
    volumes:
      - type: bind
        source: ./mosquitto/config/
        target: /mosquitto/config/
      - type: bind
        source: ./mosquitto/log/
        target: /mosquitto/log/
      - type: volume
        source: data
        target: /mosquitto/data/
    ports:
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - twin-network 
      
  mqttbridge:
    container_name: mqttbridge
    build:
      context: ./bridge
      dockerfile: Dockerfile
    image: mqttbridge
    depends_on:
      - mosquitto
    networks:
      - twin-network

  swagger-ui:
    container_name: swagger
    image: swaggerapi/swagger-ui
    ports:
      - "9011:8080"
    volumes:
      - ./swagger/openapi.json:/openapi.json
    environment:
      SWAGGER_JSON: /openapi.json

volumes:
  influxvolume:
    name: "influx-data"
  grafana_data:
    name: "grafana-data"
  data:
    name: "mqtt-broker-data"

networks:
  twin-network:
    driver: bridge
  cpee-network: